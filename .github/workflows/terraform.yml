name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Set up AWS credentials using GitHub Secrets
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1  # Directly set region value here
            

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ./network
      run: terraform init

    - name: Run Trivy vulnerability scanner (Network)
      uses: aquasecurity/trivy-action@0.20.0
      with:
       scan-type: 'filesystem'
       path: './network'

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      working-directory: ./network
      run: terraform fmt 

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      working-directory: ./network
      run: terraform plan 

    # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      working-directory: ./network
      run: terraform apply -auto-approve 
